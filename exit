[1mdiff --git a/app/models/post.rb b/app/models/post.rb[m
[1mindex 13ca313..7b0cbfb 100644[m
[1m--- a/app/models/post.rb[m
[1m+++ b/app/models/post.rb[m
[36m@@ -3,6 +3,8 @@[m [mclass Post < ApplicationRecord[m
     belongs_to :user[m
     has_many :comments, dependent: :destroy[m
     [m
[32m+[m[32m    has_many :votes, dependent: :destroy[m
[32m+[m[41m    [m
     default_scope { order('created_at DESC') }[m
     [m
     validates :title, length: { minimum: 5 }, presence: true[m
[1mdiff --git a/app/models/user.rb b/app/models/user.rb[m
[1mindex 1eff0f3..eee9eba 100644[m
[1m--- a/app/models/user.rb[m
[1m+++ b/app/models/user.rb[m
[36m@@ -1,6 +1,8 @@[m
 class User < ApplicationRecord[m
[31m-    has_many :posts[m
[31m-    has_many :comments[m
[32m+[m[41m    [m
[32m+[m[32m    has_many :posts, dependent: :destroy[m
[32m+[m[32m    has_many :comments, dependent: :destroy[m
[32m+[m[32m    has_many :votes, dependent: :destroy[m
     [m
     before_save { self.email = email.downcase if email.present? }[m
     before_save { self.role ||= :member }[m
[1mdiff --git a/db/schema.rb b/db/schema.rb[m
[1mindex 4636139..ded625f 100644[m
[1m--- a/db/schema.rb[m
[1m+++ b/db/schema.rb[m
[36m@@ -10,7 +10,7 @@[m
 #[m
 # It's strongly recommended that you check this file into your version control system.[m
 [m
[31m-ActiveRecord::Schema.define(version: 20170324132611) do[m
[32m+[m[32mActiveRecord::Schema.define(version: 20170324143832) do[m
 [m
   create_table "advertisements", force: :cascade do |t|[m
     t.string   "title"[m
[36m@@ -86,4 +86,14 @@[m [mActiveRecord::Schema.define(version: 20170324132611) do[m
     t.integer  "role"[m
   end[m
 [m
[32m+[m[32m  create_table "votes", force: :cascade do |t|[m
[32m+[m[32m    t.integer  "value"[m
[32m+[m[32m    t.integer  "user_id"[m
[32m+[m[32m    t.integer  "post_id"[m
[32m+[m[32m    t.datetime "created_at", null: false[m
[32m+[m[32m    t.datetime "updated_at", null: false[m
[32m+[m[32m    t.index ["post_id"], name: "index_votes_on_post_id"[m
[32m+[m[32m    t.index ["user_id"], name: "index_votes_on_user_id"[m
[32m+[m[32m  end[m
[32m+[m
 end[m
[1mdiff --git a/spec/models/post_spec.rb b/spec/models/post_spec.rb[m
[1mindex 26706c8..4f03f3e 100644[m
[1m--- a/spec/models/post_spec.rb[m
[1m+++ b/spec/models/post_spec.rb[m
[36m@@ -13,6 +13,7 @@[m [mRSpec.describe Post, type: :model do[m
     let(:post) { topic.posts.create!(title: title, body: body, user: user) }[m
     [m
     it { is_expected.to have_many(:comments) }[m
[32m+[m[32m    it { is_expected.to have_many(:votes) }[m
     [m
     it { is_expected.to belong_to(:topic) }[m
     it { is_expected.to belong_to(:user) }[m
[36m@@ -30,5 +31,32 @@[m [mRSpec.describe Post, type: :model do[m
             expect(post).to have_attributes(title: title, body: body, user: user)[m
         end[m
     end[m
[32m+[m[41m    [m
[32m+[m[32m    describe "voting" do[m
[32m+[m[32m        before do[m
[32m+[m[32m            3.times { post.votes.create!(value: 1) }[m
[32m+[m[32m            2.times { post.votes.create!(value: -1) }[m
[32m+[m[32m            @up_votes = post.votes.where(value: 1).count[m
[32m+[m[32m            @down_votes = post.votes.where(value: -1).count[m
[32m+[m[32m        end[m
[32m+[m[41m        [m
[32m+[m[32m        describe "#up_votes" do[m
[32m+[m[32m            it "counts the number of votes with value = 1" do[m
[32m+[m[32m                expect( post.up_votes ).to eq(@up_votes)[m
[32m+[m[32m            end[m
[32m+[m[32m        end[m
[32m+[m[41m        [m
[32m+[m[32m        describe "#down_votes" do[m
[32m+[m[32m            it "counts the number of votes with value = -1" do[m
[32m+[m[32m                expect( post.down_votes ).to eq(@down_votes)[m
[32m+[m[32m            end[m
[32m+[m[32m        end[m
[32m+[m[41m        [m
[32m+[m[32m        describe "#points" do[m
[32m+[m[32m            it "returns the sum of all down and up votes" do[m
[32m+[m[32m                expect( post.points ).to eq(@up_votes - @down_votes)[m
[32m+[m[32m            end[m
[32m+[m[32m        end[m
[32m+[m[32m    end[m
 end[m
   [m
[1mdiff --git a/spec/models/user_spec.rb b/spec/models/user_spec.rb[m
[1mindex cda5a97..3c69945 100644[m
[1m--- a/spec/models/user_spec.rb[m
[1m+++ b/spec/models/user_spec.rb[m
[36m@@ -5,6 +5,7 @@[m [mRSpec.describe User, type: :model do[m
     [m
     it { is_expected.to have_many(:posts) }[m
     it { is_expected.to have_many(:comments) }[m
[32m+[m[32m    it { is_expected.to have_many(:votes) }[m
     [m
     it { is_expected.to validate_presence_of(:name) }[m
     it { is_expected.to validate_length_of(:name).is_at_least(1) }[m
